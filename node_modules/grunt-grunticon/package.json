{
  "_args": [
    [
      {
        "raw": "grunt-grunticon",
        "scope": null,
        "escapedName": "grunt-grunticon",
        "name": "grunt-grunticon",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Emran/Desktop/Code/Udacity/FENanodegree/Project_build_a_portfolio_site/responsive_images/project_part_1"
    ]
  ],
  "_from": "grunt-grunticon@latest",
  "_id": "grunt-grunticon@2.3.1",
  "_inCache": true,
  "_location": "/grunt-grunticon",
  "_nodeVersion": "4.4.7",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/grunt-grunticon-2.3.1.tgz_1475607013653_0.6926361294463277"
  },
  "_npmUser": {
    "name": "filamentgroup",
    "email": "thegroup@filamentgroup.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-grunticon",
    "scope": null,
    "escapedName": "grunt-grunticon",
    "name": "grunt-grunticon",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-grunticon/-/grunt-grunticon-2.3.1.tgz",
  "_shasum": "68349d56bfeaee39e4110feb62491e05e161d2ee",
  "_shrinkwrap": null,
  "_spec": "grunt-grunticon",
  "_where": "/Users/Emran/Desktop/Code/Udacity/FENanodegree/Project_build_a_portfolio_site/responsive_images/project_part_1",
  "author": {
    "name": "Scott Jehl",
    "email": "scott@filamentgroup.com",
    "url": "http://filamentgroup.com"
  },
  "bugs": {
    "url": "https://github.com/filamentgroup/grunticon/issues"
  },
  "dependencies": {
    "grunticon-lib": "^1.2.1"
  },
  "description": "A mystical CSS icon solution",
  "devDependencies": {
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-nodeunit": "^1.0.0",
    "grunt-contrib-qunit": "^1.2.0",
    "grunt-svgmin": "^2.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "68349d56bfeaee39e4110feb62491e05e161d2ee",
    "tarball": "https://registry.npmjs.org/grunt-grunticon/-/grunt-grunticon-2.3.1.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "ca658302ba462ae75d1e162316b36d655c31fb5f",
  "homepage": "https://github.com/filamentgroup/grunticon",
  "keywords": [
    "gruntplugin"
  ],
  "license": "MIT",
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "scott jehl",
      "email": "scott@scottjehl.com"
    },
    {
      "name": "filamentgroup",
      "email": "thegroup@filamentgroup.com"
    },
    {
      "name": "jlembeck",
      "email": "jlembeck@gmail.com"
    }
  ],
  "name": "grunt-grunticon",
  "optionalDependencies": {},
  "readme": "# Grunticon [![Build Status](https://travis-ci.org/filamentgroup/grunticon.png?branch=master)](https://travis-ci.org/filamentgroup/grunticon)\n\n[![Join the chat at https://gitter.im/filamentgroup/grunticon](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/filamentgroup/grunticon?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n```\n         /'\n        //\n    .  //\n    |\\//7\n   /' \" \\\n  .   . .\n  | (    \\\n  |  '._  '\n  /    \\'-'\n\n```\n\n[![Filament Group](http://filamentgroup.com/images/fg-logo-positive-sm-crop.png) ](http://www.filamentgroup.com/)\n\n### A mystical CSS icon solution\n\ngrunticon is a [Grunt.js](https://github.com/gruntjs/grunt/) task that makes it easy to manage icons and background images for all devices, preferring HD (retina) SVG icons but also provides fallback support for standard definition browsers, and old browsers alike. From a CSS perspective, it's easy to use, as it generates a class referencing each icon, and doesn't use CSS sprites.\n\ngrunticon takes a [folder of SVG/PNG files](https://github.com/filamentgroup/grunticon/tree/master/example/source) (typically, icons that you've drawn in an application like Adobe Illustrator), and [outputs them](https://github.com/filamentgroup/grunticon/tree/master/example/output) to CSS in 3 formats: [svg data urls](https://github.com/filamentgroup/grunticon/blob/master/example/output/icons.data.svg.css), [png data urls](https://github.com/filamentgroup/grunticon/blob/master/example/output/icons.data.png.css), and [a third fallback CSS file with references to regular png images](https://github.com/filamentgroup/grunticon/blob/master/example/output/icons.fallback.css), which are also automatically [generated and placed in a folder](https://github.com/filamentgroup/grunticon/tree/master/example/output/png).\n\ngrunticon also generates [a small bit of JavaScript](https://github.com/filamentgroup/grunticon/blob/master/tasks/grunticon/static/grunticon.loader.js) to drop into your site, which asynchronously loads the appropriate icon CSS depending on a browser's capabilities, and a preview HTML file with that loader script in place.\n\nYou can see [a demonstration of the output here](http://filamentgroup.github.com/grunticon/example/output/preview.html#embedded-svg-option).\n\n## Version 2.0 is out - Here's What's New!\n\nWith Grunticon version 2.0, we've added the `enhanceSVG` option which allows you\nto easily  style and animate your SVGs with CSS or add interactivity with JavaScript.\nStandard Grunticons are static background images that can't be styled or scripted\nbecause SVG only supports this ability if the SVG data is in the HTML document.\nIn 2.0, you can now choose which icons you want to \"enhance\" and the new loader\nscript will copy the icon SVG paths from the cached Grunticon stylesheet and inject\nthem as an embedded SVG element for you to script and style as needed. This allows\nus to offer the best of both worlds: the full power of embedded SVGs but with none\nthe wasted bandwidth of including SVGs in your page markup.\n\nRemember that only browsers that support SVGs will see these effects so use them\nonly for \"enhancements\" that don't break the experience when not present. Embedding\nicons also has some degree of execution overhead so we recommend using this feature\nsparingly: only embed an icon if you need to apply style or scripting, otherwise\nuse the classic background-image icon.\n\nTo start - in your Gruntfile.js, set the value for `enhanceSVG` to `true` so the\nloader will parse the markup for icons that should be embedded at runtime:\n\n```JavaScript\ngrunticon: {\n  foo: {\n    files: {\n      // Handle files here\n    },\n    options: {\n      // Handle your options as you normally would here\n      enhanceSVG: true\n    }\n  }\n}\n```\n\nThen, make sure you get the new loader that's produced for you when you run `grunt` (it should be in the [same place as before](https://github.com/filamentgroup/grunticon/blob/master/example/output/grunticon.loader.js)) and inline that script in the `<head>`.\n\nJust after the loader, you'll need to call `grunticon` and pass your 3 CSS file paths to it as usual. Additionally though, you'll want to add a fourth argument to kick off the SVG embedding, which we've pre-defined for you as `grunticon.svgLoadedCallback`. In all, your call to `grunticon` will now look something like this:\n\n```JavaScript\ngrunticon([\"icons.data.svg.css\", \"icons.data.png.css\", \"icons.fallback.css\"], grunticon.svgLoadedCallback );\n```\n\nAfter you've done this, you can have any icon embedded in the page and ready for styling just by adding a `data-grunticon-embed` attribute.\n\n```html\n<div class=\"icon-burger alt\" data-grunticon-embed></div>\n```\n\nOnce the loader runs, the SVG will be embedded:\n\n```html\n<div style=\"background-image: none;\" class=\"icon-burger alt\">\n  <svg class=\"svg-source\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"30\" viewBox=\"170.6 12.6 32 30\" enable-background=\"new 170.6 12.6 32 30\">\n    <g class=\"hamburger\">\n      <path class=\"buns\" fill=\"#DDAF6D\" d=\"M188.6 12.6h-4c-5.5 0-13 4.5-13 10v1c0 .6.4 1 1 1h28c.6 0 1-.4 1-1v-1c0-5.5-7.5-10-13-10zm-17 28c0 1.1.9 2 2 2h26c1.1 0 2-.9 2-2v-2h-30v2z\">\n      </path>\n      <path class=\"burger\" fill=\"#BB6F39\" d=\"M172.6 34.6h28c1.1 0 2 .9 2 2s-.9 2-2 2h-28c-1.1 0-2-.9-2-2s.9-2 2-2z\">\n      </path>\n      <path class=\"cheese\" fill=\"#EFC75E\" d=\"M172.6 30.6h28v4h-2l-3 3-3-3h-20v-4z\">\n      </path>\n      <path class=\"lettuce\" fill=\"#3DB39E\" d=\"M200.6 27.6l-28-.1v.1c-1.1.2-2 1.2-2 2.4 0 1.4 1.1 2.5 2.5 2.5 1.2 0 2.2-.9 2.4-2h4.1c0 1.1 1.1 2 2.5 2s2.5-.9 2.5-2h4c0 1.1 1.1 2 2.5 2s2.5-.9 2.5-2h4.1c.2 1.1 1.2 2 2.4 2 1.4 0 2.5-1.1 2.5-2.5 0-1.1-.9-2.1-2-2.4z\">\n      </path>\n      <path class=\"tomato\" fill=\"#BF392C\" d=\"M172.6 24.6h28v3h-28v-3z\"></path>\n      <path class=\"shadows\" fill=\"#C69D63\" d=\"M172.6 24.6h2c-.6 0-1-.4-1-1v-1c0-5.5 7.5-10 13-10h-2c-5.5 0-13 4.5-13 10v1c0 .5.4 1 1 1zm1 16v-2h-2v2c0 1.1.9 2 2 2h2c-1.1 0-2-.9-2-2z\">\n      </path>\n      <path class=\"burger-shadow\" fill=\"#A86433\" d=\"M172.6 36.6c0-1.1.9-2 2-2h-2c-1.1 0-2 .9-2 2s.9 2 2 2h2c-1.1 0-2-.9-2-2z\">\n      </path>\n      <path fill=\"#37A18E\" d=\"M172.6 30.1c0-1.2.9-2.2 2-2.4v-.1h-2v.1c-1.1.2-2 1.2-2 2.4 0 1.4 1.1 2.5 2.5 2.5.4 0 .7-.1 1-.2-.9-.4-1.5-1.3-1.5-2.3zm9 .5h-2c0 1.1 1.1 2 2.5 2 .4 0 .7-.1 1-.2-.9-.3-1.5-1-1.5-1.8zm9 0h-2c0 1.1 1.1 2 2.5 2 .4 0 .7-.1 1-.2-.9-.3-1.5-1-1.5-1.8zm9 0h-2c.2 1.1 1.2 2 2.4 2 .4 0 .7-.1 1-.2-.7-.4-1.2-1-1.4-1.8z\" class=\"lettuce-shadow\">\n      </path>\n    </g>\n  </svg>\n</div>\n```\n\nNow, style appropriately:\n\n```css\n  .icon-burger {\n    width: 32px;\n    height: 30px;\n    display: inline-block;\n  }\n  .icon-burger.alt .cheese {\n    fill: red;\n  }\n  .icon-burger.alt .buns {\n    fill: orange;\n  }\n  .icon-burger.alt .burger {\n    fill: yellow;\n  }\n  .icon-burger.alt .lettuce {\n    fill: green;\n  }\n```\n\nAnd voila! Styled SVG icons!\n\nCheck out our example at http://filamentgroup.github.io/grunticon/example/output/preview.html\n\n### Also: How to use SVG Embedding across domains\n\nIf you're hosting your grunticon CSS on a different domain than your HTML, you will need to do a little extra configuration to use SVG Embedding.\n\n1. Set the `corsEmbed` option to `true` in your gruntfile. This adds a little extra scripting to the grunticon loader so that it can make a cross-domain request.\n2. Once that's in, change the callback at the end of your grunticon call to reference `svgLoadedCORSCallback` instead of the one listed above.\n3. That might be enough, but if not, you'll need to enable cross-domain requests on the server where the CSS is hosted. Here's how that looks in Apache .htaccess for example:\n\n```\n<IfModule mod_headers.c>\n    Header add Access-Control-Allow-Origin \"*\"\n</IfModule>\n```\n\n(That \"*\" can be a particular domain if you want)\n\n## Before you get started!\n\n[Have you seen Grumpicon?](http://grumpicon.com)\n\n[<img src=\"http://filamentgroup.com/images/grunticon_workflow_grumpicon.jpg\" width=\"400\">](http://grumpicon.com)\n\n[Grumpicon](http://grumpicon.com) is a browser-based app that performs much of the functionality of Grunticon through a simple drag and drop interface. It's much easier to set up than Grunticon, and sometimes, it's all you need (though it won't always be!)\n\nIf you're interested in trying out Grumpicon, you might be interested in this handy guide as well: [Grumpicon Workflow](http://filamentgroup.com/lab/grumpicon_workflow/)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.2`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. You might also check out Chris Coyier’s great article, [Grunt for People Who Think Things Like Grunt are Weird and Hard](http://24ways.org/2013/grunt-is-not-weird-and-hard/).\n\n\nOnce you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-grunticon --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-grunticon');\n```\n\n## The \"grunticon\" task\n\nFor a brief overview of the Grunticon workflow, particularly from a designer's perspective, you might check out Todd Parker's article, [A Designer’s Guide to Grumpicon](http://www.filamentgroup.com/lab/grumpicon-workflow.html), which covers basic SVG workflow tips for both Grunticon and Grumpicon.\n\n\n### Required configuration properties\n\ngrunticon has a files object that needs to be filled in order to run,\nthis files object currently requires that a cwd, and a dest dir are\nplaced, and therefore will blow up without it. This will be fixed to\nbetter fit the pattern set by Grunt for this.\n\nThese can be set in your Gruntfile.js config file. Grunticon is a multitask, making it easy to create as many export batches as you'd like. Just create one or more custom named objects within the `grunticon` object, and configure Grunticon `options` within it, like so:\n\n```JavaScript\ngrunticon: {\n\tmyIcons: {\n\t\tfiles: [{\n\t\t\texpand: true,\n\t\t\tcwd: 'example/source',\n\t\t\tsrc: ['*.svg', '*.png'],\n\t\t\tdest: \"example/output\"\n\t\t}],\n\t\toptions: {\n\t\t}\n\t}\n}\n```\n\n**IMPORTANT NOTE:** grunticon will overwrite any files in the `dest` directory if they are of the same name as a file that grunticon needs to create. For easiest results, you can set `dest` to a folder that does not yet exist in your directory and grunticon will create that folder, or set it to an existing folder and be sure to configure grunticon to create file names that do not already exist in that folder.\n\nWith these configuration properties set, you can add `grunticon` to your default tasks list. That'll look something like this:\n\n    grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify', 'grunticon:myIcons']);\n\ngrunticon will now batch your icons whenever you run grunt.\n\n### Options\n\n#### options.datasvgcss\nType: `String`\nDefault value: `\"icons.data.svg.css\"`\n\nThe name of the generated CSS file containing SVG data uris.\n\n#### options.datapngcss\nType: `String`\nDefault value: `\"icons.data.png.css\"`\n\nThe name of the generated CSS file containing PNG data uris\n\n#### options.urlpngcss\nType: `String`\nDefault value: `\"icons.fallback.css\"`\n\nThe name of the generated CSS file containing external png url references.\n\n#### options.previewhtml\nType: `String`\nDefault value: `\"preview.html\"`\n\nThe name of the generated HTML file containing PNG data uris.\n\n\n#### options.loadersnippet\nType: `String`\nDefault value: `\"grunticon.loader.js\"`\n\nThe name of the generated text file containing the grunticon loading snippet.\n\n#### options.enhanceSVG\nType: `Boolean`\nDefault value: `False`\n\nInclude additional methods in the loader script to offer SVG embedding\n\n#### options.corsEmbed\nType: `Boolean`\nDefault value: `False`\n\nInclude additional methods in the loader script to offer cross-domain SVG embedding. `options.enhanceSVG` must be `true` for this option to be respected.\n\n#### options.pngfolder\nType: `String`\nDefault value: `\"png/\"`\n\n The name of the generated folder containing the generated PNG images.\n\n#### options.pngpath\nType: `String`\nDefault value: value of `options.pngfolder`\n\nAllows you to specify a custom URL to serve fallback PNGs at.\n\nExample:\n\n```\n{\n    pngpath: \"/assets/icons/png\"\n}\n```\n\nWill generate PNG fallbacks like:\n\n```\n.icon-bar {\n\tbackground-image: url('/assets/icons/png/bar.png');\n\tbackground-repeat: no-repeat;\n}\n```\n\n#### options.cssprefix\nType: `String`\nDefault value: `\".icon-\"`\n\na string to prefix all icon selectors with (currently only classes or\nids are guaranteed to work with the preview)\n\n#### options.customselectors\nType: `Object`\n\nAllows you to specify custom selectors for individual files. This is in addition to the selectors generated using `cssprefix + filename - extension`.\n\nExample:\n\n```JavaScript\n{\n\t\"foo\": [\".icon-bar\", \".baz\"]\n}\n```\n\nwill produce:\n\n```css\n.icon-bar,\n.baz,\n.icon-foo {\n\t//css\n}\n```\n\nYou can also use an asterisk in your custom selector. The filename can be referenced with `$1`.\n\nExamples:\n\n```JavaScript\n...\ncustomselectors: {\n  \"*\": [\".icon-$1:before\", \".icon-$1-what\", \".hey-$1\"]\n},\ncssprefix: \".icon-\"\n...\n```\n\nShould give the file bear.svg the css\n```css\n.icon-bear:before,\n.icon-bear-what,\n.hey-bear,\n.icon-bear {\n // CSS THINGS\n}\n```\n\nAnd if there are files bear.svg and cat.svg, the css should be like:\n\n```css\n.icon-bear:before,\n.icon-bear-what,\n.hey-bear,\n.icon-bear {\n // CSS THINGS\n}\n\n.icon-cat:before,\n.icon-cat-what,\n.hey-cat,\n.icon-cat {\n // CSS THINGS\n}\n```\n\nThis should give you more flexibility with your selectors.\n\n#### options.defaultWidth\nType: `String`\nDefault value: `\"400px\"`\n\na string that MUST be defined in px that will be the size of the PNG if there is no width given in the SVG element.\n\n#### options.defaultHeight\nType: `String`\nDefault value: `\"300px\"`\n\nsimilar to defaultWidth, but for height\n\n#### options.previewTemplate\nType: `String`\nDefault value: Goes to the example/preview.hbs file\n\nTakes a path to the template that will be used for the preview.html. Example of .hbs file contents:\n\n```html\n<!doctype HTML>\n<html>\n  <head>\n    <title>Icons Preview!</title>\n    <style>\n      body {\n        background-image: linear-gradient(#eee 25%, transparent 25%, transparent), linear-gradient(#eee 25%, transparent 25%, transparent), linear-gradient(transparent 75%, #eee 75%), linear-gradient(transparent 75%, #eee 75%);\n        width: 100%;\n        background-size: 10px 10px;\n      }\n    </style>\n    <script>\n      {{{loaderText}}}\n      grunticon([\"icons.data.svg.css\", \"icons.data.png.css\", \"icons.fallback.css\"]);\n    </script>\n  <noscript><link href=\"icons.fallback.css\" rel=\"stylesheet\"></noscript>\n  </head>\n  <body>\n    {{#each icons}}\n      {{#with this}}\n      <pre><code>{{prefix}}{{name}}:</code></pre><div class=\"{{prefixClass}}{{name}}\" style=\"width: {{width}}px; height: {{height}}px;\" ></div><hr/>\n      {{/with}}\n    {{/each}}\n</body>\n</html>\n```\n\n#### options.tmpPath\nType: `String`\nDefault value: `os.tmpDir()`\n\nLet's you specify an absolute tmp-path (`options.tmpDir` will still be appended).\n\n#### options.tmpDir\nType: `String`\nDefault value: `\"grunticon-tmp\"`\n\nLet's you specify a tmp-folder. Useful when having multiple grunticon tasks and using [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent \"grunt-concurrent on github\").\n\n#### options.template\nType: `String`\nDefault value: `\"\"`\n\nLocation of a handlebars template that will allow you to structure your\nCSS file the way that you choose. As more data becomes available via\n[directory-encoder](https://github.com/filamentgroup/directory-encoder),\nmore options will be available for you to tap into during templating.\n\n\nExample of .hbs file contents:\n\n```css\n{{#each customselectors}}{{this}},{{/each}}\n{{prefix}}{{name}} {\n\tbackground-image: url('{{datauri}}');\n\tbackground-repeat: no-repeat;\n}\n```\n\n#### options.compressPNG\nType: `Boolean`\nDefault value: `false`\n\nWill compress the converted png files using optipng\n\n\n#### options.optimizationLevel\nType: `Integer`\nDefault value: `3`\n\nIf compress is set to `true`, this will set the optimationLevel for optipng\n\n\n#### Automating color variations\n\nGrunticon allows you to output any icon in different colors simply by changing its filename to the following syntax: `myfilename.colors-red-aa0000-gray.svg`. In this example, any color names or hexidecimal values that follow `colors-` and are separated by a dash will be used to generate additional icons of that color. By default, each icon will be assigned a numbered class name for CSS use. You can improve the class naming conventions by defining color variables in your Gruntfile's `colors` option shown below. When defined, you can reference a color variable in place of a color in your file names, and the generated classes will use that variable name as well. See the `Gruntfile.js`'s `colors` and `dynamicColorOnly` options for an example of how color automation.\n\n*A note on filesize impact:* Adding color variations of an icon involves creating duplicates of that icon's SVG source in the CSS, so unfortunately, each color variation will cause an increase in filesize. However, transferring CSS with gzip compression can negate much of this filesize increase, and we highly recommend always transferring with gzip. In testing, we found that creating a color variation of every icon in our example set increased overall size by 25%, rather than 100% as a raw text duplicate would increase. That said, size increases for non-SVG-supporting browsers will be more dramatic, as the fallback PNGs will not have the heavy transfer compression as SVG enjoys. We advise using this feature on a case-by-case basis to ensure overhead is kept to a minimum.\n\n#### options.colors\nAllows you to predefine colors as variables that can be used in filename color configuration.\n```js\noptions: {\n\tcolors: {\n\t\tmyAwesomeRed: \"#fc3d39\",\n\t\tcoolBlue: \"#6950ff\"\n\t}\n```\n\n#### options.dynamicColorOnly\nType: `Boolean`\nDefault value: `false`\n\nAllows you to tell directory-colorfy to ignore the original file when\nusing colors.\n\nFor example, if given a file named like so:\n\n```\nbear.colors-white.svg\n```\n\nAnd `dynamicColorOnly` is set to `true`:\n\n```js\n{\n\tdynamicColorOnly: true\n}\n```\n\nThen only a single file: `bear-white.svg`, will be generated, rather than two: `bear.svg` with the original colors and `bear-white.svg` with white colors.\n\n\n### Grunticon Loader Methods\n\nWith `enhanceSVG` turned on, the Grunticon loader has a few exposed methods and attributes on the `grunticon` object that you can use:\n\n#### href\nType: `String`\n\nThe url that is being loaded by Grunticon.\n\n#### method\nType: `String`\n\nIs `\"svg\"` if the page loaded the SVG-based css.\nIs `\"datapng\"` if the page loaded the png with datauri-based css.\nIs `\"png\"` if the page loaded the plain link to png-based css.\n\n#### loadCSS\nSee: https://github.com/filamentgroup/loadcss\n\n#### getCSS\nArguments: `String`\nReturns: `Object`\n\nFetch a stylesheet `link` by its `href`.\n\n#### getIcons\nArguments: `String`\nReturns: `Object`\n\nTakes a stylesheet node (`link` or `style`) and returns all of the icon selectors and the svgs contained within it in an object formatted\nin this way:\n```\n{\n  grunticon:selector: \"SVG Content in String\"\n}\n```\n\n#### embedIcons\nArguments: `Object`\nReturns: `NodeList`\n\nTakes icons in the object format outputted by `getIcons` and then queries the page for all icons with the\n`data-grunticon-embed` attribute. For each of these that it finds, it places the SVG contents associated with\nthe relevant selector in the icons. It then returns the NodeList of all of the elements that had SVGs embedded\nin them.\n\n#### ready\nArguments: `Function`\nReturns: None\n\nAn alternative to listening for the `DOMContentLoaded` event. Takes a function as a callback and calls the function\nwhen the DOM is ready.\n\n#### svgLoadedCallback\nArguments: `Function`\nReturns: None\n\nUses the above methods to call:\n```\nvar svgLoadedCallback = function( embedComplete ){\n  ready(function(){\n    embedIcons(getIcons(grunticon.href));\n    embedComplete();\n  });\n}\n```\n\nIf `embedComplete` is defined, the loader will call it when SVG embedding is complete. This is true for both local and CORS embedding. So if you need to run logic after SVG markup is appended to the DOM, just pass a callback to `grunticon.svgLoadedCallback` or `grunticon.svgLoadedCORSCallback`.\n\n\n### Cross-domain SVG Embedding Methods\n\nWith `enhanceSVG` and `corsEmbed` turned on, the Grunticon loader has a few exposed 2 more methods and attributes on the `grunticon` object that you can use:\n\n#### ajaxGet\nArguments: `String`, `Function`\nReturns: `Object`\n\nFirst argument is a string reference to a url to request via cross-domain Ajax. Second argument is an optional callback when the request finishes loading. (In the callback, `this` refers to the XHR object).\n\n\n#### svgLoadedCORSCallback\nArguments: `Function`\nReturns: None\n\nUses the above methods to make SVG embedding work when CSS is hosted on another domain. (CORS must be allowed on the external domain.)\n\n\n\n## Browser testing results for icon output\n\nThe generated asynchronous CSS loader script delivers an appropriate icon stylesheet depending on a device/browser's capabilities. Grunticon is supported in cases where icon fonts fail.\n\nBrowsers that render the SVG data url stylesheet:\n- IE9\n- Chrome 14+ (maybe older too?)\n- Safari 4+ (maybe older too?)\n- Firefox 3.6+ (maybe older too?)\n- Opera 15+\n- iOS 3+ Safari and Chrome\n- Android 4.0 Chrome (caveat: SVG icons do not scale in vector, but do appear to draw in high-resolution)\n- Android 4.0 ICS Browser\n- BlackBerry Playbook\n\nBrowsers that receive the PNG data url stylesheet:\n- IE8\n- All versions of Opera, Opera Mini, and Opera Mobile before Chrome integration (v 15)\n- Android 2.3 Browser\n- Android 2.2 Browser\n- Android 2.1 Browser\n- Android 1.6 Browser\n- Android 1.5 Browser\n\nBrowsers that receive the fallback png request:\n- IE7\n- IE6\n- Non-JavaScript environments\n\nView the full support spreadsheet [here](https://docs.google.com/spreadsheet/ccc?key=0Ag5_yGvxpINRdHFYeUJPNnZMWUZKR2ItMEpRTXZPdUE#gid=0). Feel free to edit it if you find anything new.\n\nThe test page can be found [here](http://filamentgroup.com/examples/grunticon-icon-test/).\n\n## Tips\n\n### Cleaning the cruft out of your SVGs\n\nIn earlier versions of Grunticon, we included SVGO to optimize the SVG output. In the 1.0\nversion, we removed this dependency to ease the installation complexity but still recommend\nthat SVG optimization is part of the Grunticon workflow.\n\nWhen producing SVGs through a tool like Illustrator, there is a lot of\nunnecessary markup, comments, and general code written into your SVG\nfiles. Because of that, we strongly recommend using a tool like [grunt-svgmin](https://github.com/sindresorhus/grunt-svgmin).\nIf run before running Grunticon, it can greatly reduce your filesizes!\n\nHere's an example:\n\n```js\nsvgmin: {\n\tdist: {\n\t\toptions: {\n\t\t\tplugins: [\n\t\t\t\t// Don't remove XML declaration (needed to avoid errors creating PNG on Win 7)\n\t\t\t\t{ removeXMLProcInst: false }\n\t\t\t]\n\t\t},\n\t\tfiles: [{\n\t\t\texpand: true,\n\t\t\tcwd: 'example/svgs',\n\t\t\tsrc: ['*.svg'],\n\t\t\tdest: 'example/source'\n\t\t}]\n\t}\n},\ngrunticon: {\n\tfoo: {\n\t\tfiles: [{\n\t\t\texpand: true,\n\t\t\tcwd: 'example/source',\n\t\t\tsrc: ['*.svg', '*.png'],\n\t\t\tdest: \"example/output\"\n\t\t}],\n\t\toptions: {\n\t\t}\n\t}\n}\n```\n\nThe svgmin options section is only needed to avoid errors under windows and can be omitted for smaller svg files on other platforms. For a more extensive example, check out our Gruntfile example project.\n\n### Serving compressed CSS\nOne of the great benefits to data uris is the ability to compress the images heavily via gzip compression. Be sure to enable gzip of CSS on your server, as it'll cut your icon transfer size greatly.\n\n### Creating SVG Artwork\n\nThe workflow we've been using so far involves creating a new Illustrator file with the artboard set to the desired size of the icon you want set in the CSS.\n\nExport the artwork by choosing File > Save as...  In the dialog, choose \"SVG\" as the format and enter a name for the file (this wil be used as your class name later, so keep it free of any disallowed CSS class characters like `.`, `{`, `(`, `)`, etc.\n\nIn the Save SVG dialog that opens up, there are lots of options. SVG has a ton of formats, so here are a few tips we've learned.\n\n- SVG Profile: Seems like SVG 1.1 Tiny is really well supported across even older mobile platforms so if you have simple artwork that doesn't use gradients or opacity this will yield a smaller and more compatible graphic. If you want to use all the fancy effects, save artwork as SVG 1.1.\n- Type: Convert to outline before export.\n- Subsetting: None, I usually convert all text to outlines ahead of time\n- Images: Embed\n- Don't check \"Preserve Illustrator editing\" to reduce file size\n\n## Warnings\n* If your files have `#`, `.`, `>`, or any other css selecting character in their names, they will likely be improperly processed.\n\n## Release History\n* Version 2.1.0: Add ability to embed SVGs with cross-domain requested CSS files via `corsEmbed` option\n* Version 2.0.0: Add ability to enhance SVGs by embedding them inside of the element instead of using a background-image\n* Version 1.4.0: Add `tmpPath` option\n* Version 1.3.0: Add `dynamicColorOnly` support from directory-colorfy\n* Version 1.2.0: Update directory-encoder version, this allows the\n  `pngpath` option\n* Version 1.1.0: Add `previewTemplate` option\n* Version 1.0.0: Some alpha and beta bugs taken care of.\n* Version 1.0.0-alpha: Almost complete rewrite. Breaking out pieces of this\nproject into other areas. Removed SVGO and PNGCrush. SVGO is better\nserved through the svgmin plugin.\n* Version 0.6.5: CSS Writing has been moved from Phantom to Node, in order to decrease base64 datauri sizes\n* Version 0.6.0: Grunticon now comes with PNG Crush. This will reduce the size of your PNGs\n* Version 0.5.0: Grunticon now comes with SVGO. This cleans up your SVGs, greatly reducing the size of your CSS file.\n* Version 0.4.1: Opera browsers prior to version 15 are given fallback PNG due to SVG scaling troubles.\n* Version 0.4.0: Automated filename-driven color variations were added, along with the `colors` option\n* Version 0.3.4: SVGs without width and height can be used\n* Version 0.3.2: Added PhantomJS as a Node dependency, easing installation\n* Version 0.3.1: Documentation updates\n* Version 0.3.0: Grunticon becomes a multitask - syntax change involved in Gruntfile\n* Version 0.2.1: Custom selectors feature added\n* Version 0.2.0: Compatibility rewrite for Grunt 0.4x\n* Version 0.1.6: Switched from base64 encoding to escaping raw SVG text in data uris. Fixes to cssprefix setting. If fallback png data uri is > 32768 chars, link to ext png instead for IE issues.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/filamentgroup/grunticon.git"
  },
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "version": "2.3.1"
}
