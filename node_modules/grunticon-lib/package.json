{
  "_args": [
    [
      {
        "raw": "grunticon-lib@^1.2.1",
        "scope": null,
        "escapedName": "grunticon-lib",
        "name": "grunticon-lib",
        "rawSpec": "^1.2.1",
        "spec": ">=1.2.1 <2.0.0",
        "type": "range"
      },
      "/Users/Emran/Desktop/Code/Udacity/FENanodegree/Project_build_a_portfolio_site/responsive_images/project_part_1/node_modules/grunt-grunticon"
    ]
  ],
  "_from": "grunticon-lib@>=1.2.1 <2.0.0",
  "_id": "grunticon-lib@1.2.1",
  "_inCache": true,
  "_location": "/grunticon-lib",
  "_nodeVersion": "4.4.7",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/grunticon-lib-1.2.1.tgz_1475606827722_0.8377128979191184"
  },
  "_npmUser": {
    "name": "filamentgroup",
    "email": "thegroup@filamentgroup.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunticon-lib@^1.2.1",
    "scope": null,
    "escapedName": "grunticon-lib",
    "name": "grunticon-lib",
    "rawSpec": "^1.2.1",
    "spec": ">=1.2.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/grunt-grunticon"
  ],
  "_resolved": "https://registry.npmjs.org/grunticon-lib/-/grunticon-lib-1.2.1.tgz",
  "_shasum": "c984c30e5f36d800b9d0058417f0e5240cddf891",
  "_shrinkwrap": null,
  "_spec": "grunticon-lib@^1.2.1",
  "_where": "/Users/Emran/Desktop/Code/Udacity/FENanodegree/Project_build_a_portfolio_site/responsive_images/project_part_1/node_modules/grunt-grunticon",
  "author": {
    "name": "Scott Jehl, Jeffrey Lembeck & Filament Group",
    "email": "hello@filamentgroup.com",
    "url": "http://www.filamentgroup.com"
  },
  "bugs": {
    "url": "https://github.com/filamentgroup/grunticon-lib/issues"
  },
  "dependencies": {
    "directory-colorfy": "^2.1.0",
    "directory-encoder": "^0.7.0",
    "fg-loadcss": "^0.1.8",
    "fs-extra": "^0.16.5",
    "handlebars": "^3.0.0",
    "lodash": "^3.5.0",
    "merge-defaults": "^0.2.1",
    "svg-to-png": "^3.1.0",
    "uglify-js": "^2.4.23",
    "xmldom": "^0.1.19"
  },
  "description": "Stand-alone library for Grunticon",
  "devDependencies": {
    "buffer-compare": "0.0.1",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-nodeunit": "^1.0.0",
    "grunt-contrib-qunit": "^1.2.0",
    "grunt-contrib-watch": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "c984c30e5f36d800b9d0058417f0e5240cddf891",
    "tarball": "https://registry.npmjs.org/grunticon-lib/-/grunticon-lib-1.2.1.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "4fa95901c7bea71535721f6708ec1d1e855c6722",
  "homepage": "https://github.com/filamentgroup/grunticon-lib",
  "keywords": [],
  "license": "MIT",
  "main": "lib/grunticon-lib",
  "maintainers": [
    {
      "name": "filamentgroup",
      "email": "thegroup@filamentgroup.com"
    },
    {
      "name": "jefflembeck",
      "email": "jlembeck@gmail.com"
    },
    {
      "name": "jlembeck",
      "email": "jlembeck@gmail.com"
    }
  ],
  "name": "grunticon-lib",
  "optionalDependencies": {},
  "readme": "# Grunticon-Lib [![Build Status](https://travis-ci.org/filamentgroup/grunticon-lib.png?branch=master)](https://travis-ci.org/filamentgroup/grunticon-lib)\n\n[![Join the chat at https://gitter.im/filamentgroup/grunticon](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/filamentgroup/grunticon?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n```\n         /'\n        //\n    .  //\n    |\\//7\n   /' \" \\\n  .   . .\n  | (    \\\n  |  '._  '\n  /    \\'-'\n\n```\n\n[![Filament Group](http://filamentgroup.com/images/fg-logo-positive-sm-crop.png) ](http://www.filamentgroup.com/)\n\n### A mystical CSS icon solution\n\ngrunticon is a stand-alone library that powers the one and only\n[Grunticon](https://github.com/filamentgroup/grunticon)!\n\n\n## Getting Started\n\nInstall this plugin with this command:\n\n```shell\nnpm install grunticon-lib --save\n```\n\n### To Use:\n\n```JavaScript\nvar Grunticon = require( 'grunticon-lib' );\nvar grunticon = new Grunticon( listOfFiles, destination, options );\ngrunticon.process(callback);\n```\n\n### Gulp\n\nIf you're a [Gulp](http://gulpjs.com/) user check out [gulpicon](https://github.com/filamentgroup/gulpicon) or simply create your own [task](https://gist.github.com/dcalhoun/e79ad10d518612d70721).\n\n### Required Parameters\n\n#### listOfFiles\nType: `Array`\n\nGrunticon's constructor will either take an array of files you'd like read for its first argument.\nThese will be the files processed.\n\n#### destination\nType: `String`\n\nGrunticon's constructor will take a string that is the directory you'd like\nto output the CSS files, the PNG folder, and the preview HTML for its second\nargument.\n\n### Options\n\n#### options.datasvgcss\nType: `String`\nDefault value: `\"icons.data.svg.css\"`\n\nThe name of the generated CSS file containing SVG data uris.\n\n#### options.datapngcss\nType: `String`\nDefault value: `\"icons.data.png.css\"`\n\nThe name of the generated CSS file containing PNG data uris\n\n#### options.urlpngcss\nType: `String`\nDefault value: `\"icons.fallback.css\"`\n\nThe name of the generated CSS file containing external png url references.\n\n#### options.previewhtml\nType: `String`\nDefault value: `\"preview.html\"`\n\nThe name of the generated HTML file containing PNG data uris.\n\n\n#### options.loadersnippet\nType: `String`\nDefault value: `\"grunticon.loader.js\"`\n\nThe name of the generated text file containing the grunticon loading snippet.\n\n#### options.enhanceSVG\nType: `Boolean`\nDefault value: `False`\n\nInclude additional methods in the loader script to offer SVG embedding\n\n#### options.corsEmbed\nType: `Boolean`\nDefault value: `False`\n\nInclude additional methods in the loader script to offer cross-domain SVG embedding. `options.enhanceSVG` must be `true` for this option to be respected.\n\n#### options.pngfolder\nType: `String`\nDefault value: `\"png/\"`\n\n The name of the generated folder containing the generated PNG images.\n\n#### options.pngpath\nType: `String`\nDefault value: value of `options.pngfolder`\n\nAllows you to specify a custom URL to serve fallback PNGs at.\n\nExample:\n\n```\n{\n    pngpath: \"/assets/icons/png\"\n}\n```\n\nWill generate PNG fallbacks like:\n\n```\n.icon-bar {\n\tbackground-image: url('/assets/icons/png/bar.png');\n\tbackground-repeat: no-repeat;\n}\n```\n\n#### options.cssprefix\nType: `String`\nDefault value: `\".icon-\"`\n\na string to prefix all icon selectors with (currently only classes or\nids are guaranteed to work with the preview)\n\n#### options.customselectors\nType: `Object`\n\nAllows you to specify custom selectors (in addition to the generated `cssprefix + filename - extension` class) for individual files.\n\nExample:\n\n```JavaScript\n{\n\t\"foo\": [\".icon-bar\", \".baz\"]\n}\n```\n\nwill produce:\n\n```css\n.icon-bar,\n.bar,\n.icon-foo {\n\t//css\n}\n```\n\nYou can also use an asterisk in your custom selector!\n\nExamples:\n\n```JavaScript\ncustomselectors: {\n  \"*\": [\".icon-$1:before\", \".icon-$1-what\", \".hey-$1\"]\n},\ncssprefix: \".icon-\"\n```\n\nShould give the file bear.svg the css\n```css\n.icon-bear:before,\n.icon-bear-what,\n.hey-bear,\n.icon-bear {\n // CSS THINGS\n}\n```\n\nAnd if there are files bear.svg and cat.svg, the css should be like:\n\n```css\n.icon-bear:before,\n.icon-bear-what,\n.hey-bear,\n.icon-bear {\n // CSS THINGS\n}\n\n.icon-cat:before,\n.icon-cat-what,\n.hey-cat,\n.icon-cat {\n // CSS THINGS\n}\n```\n\nThis should give you more flexibility with your selectors.\n\n#### options.defaultWidth\nType: `String`\nDefault value: `\"400px\"`\n\na string that MUST be defined in px that will be the size of the PNG if there is no width given in the SVG element.\n\n#### options.defaultHeight\nType: `String`\nDefault value: `\"300px\"`\n\nsimilar to defaultWidth, but for height\n\n#### options.previewTemplate\nType: `String`\nDefault value: Goes to the example/preview.hbs file\n\nTakes a path to the template that will be used for the preview.html. Example of .hbs file contents:\n\n```html\n<!doctype HTML>\n<html>\n  <head>\n    <title>Icons Preview!</title>\n    <style>\n      body {\n        background-image: linear-gradient(#eee 25%, transparent 25%, transparent), linear-gradient(#eee 25%, transparent 25%, transparent), linear-gradient(transparent 75%, #eee 75%), linear-gradient(transparent 75%, #eee 75%);\n        width: 100%;\n        background-size: 10px 10px;\n      }\n    </style>\n    <script>\n      {{{loaderText}}}\n      grunticon([\"icons.data.svg.css\", \"icons.data.png.css\", \"icons.fallback.css\"]);\n    </script>\n  <noscript><link href=\"icons.fallback.css\" rel=\"stylesheet\"></noscript>\n  </head>\n  <body>\n    {{#each icons}}\n      {{#with this}}\n      <pre><code>{{prefix}}{{name}}:</code></pre><div class=\"{{prefixClass}}{{name}}\" style=\"width: {{width}}px; height: {{height}}px;\" ></div><hr/>\n      {{/with}}\n    {{/each}}\n</body>\n</html>\n```\n\n#### options.tmpPath\nType: `String`\nDefault value: `os.tmpDir()`\n\nLet's you specify an absolute tmp-path (`options.tmpDir` will still be appended).\n\n#### options.tmpDir\nType: `String`\nDefault value: `\"grunticon-tmp\"`\n\nLet's you specify a tmp-folder. Useful when having multiple grunticon tasks and using [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent \"grunt-concurrent on github\").\n\n#### options.template\nType: `String`\nDefault value: `\"\"`\n\nLocation of a handlebars template that will allow you to structure your\nCSS file the way that you choose. As more data becomes available via\n[directory-encoder](https://github.com/filamentgroup/directory-encoder),\nmore options will be available for you to tap into during templating.\n\n\nExample of .hbs file contents:\n\n```css\n{{#each customselectors}}{{this}},{{/each}}\n{{prefix}}{{name}} {\n\tbackground-image: url('{{datauri}}');\n\tbackground-repeat: no-repeat;\n}\n```\n\n#### options.compressPNG\nType: `Boolean`\nDefault value: `false`\n\nWill compress the converted png files using optipng\n\n\n#### options.optimizationLevel\nType: `Integer`\nDefault value: `3`\n\nIf compress is set to `true`, this will set the optimationLevel for optipng\n\n#### options.colors\n\nAllows you to predefine colors as variables that can be used in filename color configuration.\n```js\noptions: {\n\tcolors: {\n\t\tmyAwesomeRed: \"#fc3d39\",\n\t\tcoolBlue: \"#6950ff\"\n\t}\n```\n\n#### options.dynamicColorOnly\nType: `Boolean`\nDefault value: `false`\n\nAllows you to tell directory-colorfy to ignore the original file when\nusing colors.\n\nFor example, if given a file named like so:\n\n```\nbear.colors-white.svg\n```\n\nAnd `dynamicColorOnly` is set to `true`:\n\n```js\n{\n\tdynamicColorOnly: true\n}\n```\n\nOnly a single file will be generated:\n\n```\nbear-white.svg\n```\n\n\n### Grunticon Loader Methods\n\nWith `enhanceSVG` turned on, the Grunticon loader has a few exposed methods and attributes on the `grunticon` object that you can use:\n\n#### href\nType: `String`\n\nThe url that is being loaded by Grunticon.\n\n#### method\nType: `String`\n\nIs `\"svg\"` if the page loaded the SVG-based css.\nIs `\"datapng\"` if the page loaded the png with datauri-based css.\nIs `\"png\"` if the page loaded the plain link to png-based css.\n\n#### loadCSS\nSee: https://github.com/filamentgroup/loadcss\n\n#### getCSS\nArguments: `String`\nReturns: `Object`\n\nFetch a stylesheet `link` by its `href`.\n\n#### getIcons\nArguments: `String`, `Boolean`?\nReturns: `Object`\n\nTakes a stylesheet node (`link` or `style`) and returns all of the icon selectors and the svgs contained within it in an object formatted in this way:\n```\n{\n  grunticon:selector: \"SVG Content in String\"\n}\n```\n\n**NOTE** The return value of this function is cached unless `true` is passed as a second argument:\n\n```javascript\nvar icons = window.grunticon.getIcons(...);\nconsole.log(icons.foo);        // => undefined\nicons.foo = \"bar\";\nwindow.gruntIcon(...);\nconsole.log(icons.foo);        // => bar\nwindow.gruntIcon(..., true);\nconsole.log(icons.foo);        // => undefined\n```\n\n#### embedIcons\nArguments: `DOM Element` | `Object`, `Object`?\nReturns: `NodeList`\n\nTakes icons in the object format outputted by `getIcons` and then queries the\npage for all icons with the `data-grunticon-embed` attribute. For each of these\nthat it finds, it places the SVG contents associated with the relevant selector\nin the icons. It then returns the NodeList of all of the elements that had SVGs\nembedded in them.\n\n```javascript\nwindow.grunticon.embedIcons(getIcons(...));\n```\n\nThis function can also be targeted at a particular DOM node. For example, when scripting in the page replaces DOM nodes that have embedded SVG:\n\n```javascript\nwindow.grunticon.embedIcons(document.querySelector('.replaced'), getIcons(...));\n```\n\n#### ready\nArguments: `Function`\nReturns: None\n\nAn alternative to listening for the `DOMContentLoaded` event. Takes a function as a callback and calls the function\nwhen the DOM is ready.\n\n### svgLoadedCallback\n\n**NOTE** `svgLoadedCallback` has been deprecated in favor of `embedSVG`. \n\n#### embedSVG\nArguments: `DOM Element` | `Function`, `Function`?\nReturns: None\n\nIf `embedComplete` is defined, the loader will call it when SVG embedding is\ncomplete. This is true for both local and CORS embedding. So if you need to run\nlogic after SVG markup is appended to the DOM, just pass a callback to\n`grunticon.svgLoadedCallback` or `grunticon.svgLoadedCORSCallback`.\n\n```javascript\nwindow.grunticon.embedSVG(function(){\n  console.log(\"embed complete!\");\n});\n```\n\nAlternately you can target a particular element, for example, when it's replaced\nin the DOM:\n\n```javascript\nwindow.grunticon.embedSVG(document.querySelector('.replaced'), function(){\n  console.log(\"embed complete!\");\n});\n```\n\n### Cross-domain SVG Embedding Methods\n\nWith `enhanceSVG` and `corsEmbed` turned on, the Grunticon loader has a few exposed 2 more methods and attributes on the `grunticon` object that you can use:\n\n#### ajaxGet\nArguments: `String`, `Function`\nReturns: `Object`\n\nFirst argument is a string reference to a url to request via cross-domain Ajax. Second argument is an optional callback when the request finishes loading. (In the callback, `this` refers to the XHR object).\n\n\n#### svgLoadedCORSCallback\nArguments: `Function`\nReturns: None\n\nUses the above methods to make SVG embedding work when CSS is hosted on another domain. (CORS must be allowed on the external domain.)\n\n\n## Warnings\n* If your files have `#`, `.`, `>`, or any other css selecting character in their names, they will likely be improperly processed.\n\n## Release History\n* Version 1.0.0: First release. Breaking out Grunticon from its previous Grunt.js dependency.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/filamentgroup/grunticon-lib.git"
  },
  "scripts": {
    "build": "grunt",
    "test": "grunt test"
  },
  "version": "1.2.1"
}
