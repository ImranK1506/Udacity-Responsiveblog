{
  "_args": [
    [
      {
        "raw": "imagemin@3.1.0",
        "scope": null,
        "escapedName": "imagemin",
        "name": "imagemin",
        "rawSpec": "3.1.0",
        "spec": "3.1.0",
        "type": "version"
      },
      "/Users/Emran/Desktop/Code/Udacity/FENanodegree/Project_build_a_portfolio_site/responsive_images/project_part_1/node_modules/svg-to-png"
    ]
  ],
  "_from": "imagemin@3.1.0",
  "_id": "imagemin@3.1.0",
  "_inCache": true,
  "_location": "/imagemin",
  "_nodeVersion": "0.10.32",
  "_npmUser": {
    "name": "kevva",
    "email": "kevinmartensson@gmail.com"
  },
  "_npmVersion": "2.1.7",
  "_phantomChildren": {
    "camelcase": "1.2.1",
    "is-finite": "1.0.2",
    "map-obj": "1.0.1",
    "minimist": "1.2.0"
  },
  "_requested": {
    "raw": "imagemin@3.1.0",
    "scope": null,
    "escapedName": "imagemin",
    "name": "imagemin",
    "rawSpec": "3.1.0",
    "spec": "3.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/svg-to-png"
  ],
  "_resolved": "https://registry.npmjs.org/imagemin/-/imagemin-3.1.0.tgz",
  "_shasum": "6f3f094612e48be9139939dbd1968b116749e3d5",
  "_shrinkwrap": null,
  "_spec": "imagemin@3.1.0",
  "_where": "/Users/Emran/Desktop/Code/Udacity/FENanodegree/Project_build_a_portfolio_site/responsive_images/project_part_1/node_modules/svg-to-png",
  "author": {
    "name": "Kevin Mårtensson",
    "email": "kevinmartensson@gmail.com",
    "url": "https://github.com/kevva"
  },
  "bin": {
    "imagemin": "cli.js"
  },
  "bugs": {
    "url": "https://github.com/imagemin/imagemin/issues"
  },
  "dependencies": {
    "concat-stream": "^1.4.6",
    "get-stdin": "^3.0.0",
    "imagemin-gifsicle": "^4.0.0",
    "imagemin-jpegtran": "^4.0.0",
    "imagemin-optipng": "^4.0.0",
    "imagemin-pngquant": "^4.0.0",
    "imagemin-svgo": "^4.0.0",
    "meow": "^2.0.0",
    "optional": "^0.1.0",
    "stream-combiner": "^0.2.1",
    "through2": "^0.6.1",
    "vinyl": "^0.4.3",
    "vinyl-fs": "^0.3.7"
  },
  "description": "Minify images",
  "devDependencies": {
    "ava": "^0.0.4"
  },
  "directories": {},
  "dist": {
    "shasum": "6f3f094612e48be9139939dbd1968b116749e3d5",
    "tarball": "https://registry.npmjs.org/imagemin/-/imagemin-3.1.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0",
    "npm": ">=2.1.5"
  },
  "files": [
    "cli.js",
    "index.js"
  ],
  "gitHead": "e4a66d12f24f11f46c300ccb0f6da48d950af4e3",
  "homepage": "https://github.com/imagemin/imagemin#readme",
  "keywords": [
    "compress",
    "gif",
    "image",
    "jpeg",
    "minify",
    "png",
    "svg"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "kevva",
      "email": "kevinmartensson@gmail.com"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "imagemin",
  "optionalDependencies": {
    "imagemin-gifsicle": "^4.0.0",
    "imagemin-jpegtran": "^4.0.0",
    "imagemin-optipng": "^4.0.0",
    "imagemin-pngquant": "^4.0.0",
    "imagemin-svgo": "^4.0.0"
  },
  "readme": "# imagemin [![Build Status](http://img.shields.io/travis/imagemin/imagemin.svg?style=flat)](https://travis-ci.org/imagemin/imagemin) [![Build status](https://ci.appveyor.com/api/projects/status/wlnem7wef63k4n1t)](https://ci.appveyor.com/project/ShinnosukeWatanabe/imagemin)\n\n> Minify images seamlessly\n\n\n## Install\n\n```sh\n$ npm install --save imagemin\n```\n\n\n## Usage\n\n```js\nvar Imagemin = require('imagemin');\n\nvar imagemin = new Imagemin()\n\t.src('images/*.{gif,jpg,png,svg}')\n\t.dest('build/images')\n\t.use(Imagemin.jpegtran({ progressive: true }));\n\nimagemin.run(function (err, files) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\t\n\tconsole.log(files[0]);\n\t// => { contents: <Buffer 89 50 4e ...> }\n});\n```\n\nYou can use [gulp-rename](https://github.com/hparra/gulp-rename) to rename your files:\n\n```js\nvar Imagemin = require('imagemin');\nvar rename = require('gulp-rename');\n\nvar imagemin = new Imagemin()\n\t.src('images/foo.png')\n\t.use(rename('bar.png'));\n```\n\n\n## API\n\n### new Imagemin()\n\nCreates a new `Imagemin` instance.\n\n### .src(file)\n\nType: `Array|Buffer|String`\n\nSet the files to be optimized. Takes a buffer, glob string or an array of glob strings \nas argument.\n\n### .dest(folder)\n\nType: `String`\n\nSet the destination folder to where your files will be written. If you don't set \nany destination no files will be written.\n\n### .use(plugin)\n\nType: `Function`\n\nAdd a `plugin` to the middleware stack.\n\n### .run(cb)\n\nType: `Function`\n\nOptimize your files with the given settings.\n\n#### cb(err, files, stream)\n\nThe callback will return an array of vinyl files in `files` and a Readable/Writable \nstream in `stream`.\n\n\n## Plugins\n\nThe following [plugins](https://www.npmjs.org/browse/keyword/imageminplugin) are bundled with imagemin:\n\n* [gifsicle](#gifsicle) — Compress GIF images.\n* [jpegtran](#jpegtran) — Compress JPG images.\n* [optipng](#optipng) — Lossless compression of PNG images.\n* [pngquant](#pngquant) — Lossy compression of PNG images.\n* [svgo](#svgo) — Compress SVG images.\n\n### .gifsicle()\n\nCompress GIF images.\n\n```js\nvar Imagemin = require('imagemin');\n\nvar imagemin = new Imagemin()\n\t.use(Imagemin.gifsicle({ interlaced: true }));\n```\n\n### .jpegtran()\n\nCompress JPG images.\n\n```js\nvar Imagemin = require('imagemin');\n\nvar imagemin = new Imagemin()\n\t.use(Imagemin.jpegtran({ progressive: true }));\n```\n\n### .optipng()\n\nLossless compression of PNG images.\n\n```js\nvar Imagemin = require('imagemin');\n\nvar imagemin = new Imagemin()\n\t.use(Imagemin.optipng({ optimizationLevel: 3 }));\n```\n\n### .pngquant()\n\nLossy compression of PNG images.\n\n```js\nvar Imagemin = require('imagemin');\n\nvar imagemin = new Imagemin()\n\t.use(Imagemin.pngquant());\n```\n\n### .svgo()\n\nCompress SVG images.\n\n```js\nvar Imagemin = require('imagemin');\n\nvar imagemin = new Imagemin()\n\t.use(Imagemin.svgo());\n```\n\n\n## CLI\n\n```bash\n$ npm install --global imagemin\n```\n\n```sh\n$ imagemin --help\n\nUsage\n  imagemin <file> <directory>\n  imagemin <file> > <output>\n  cat <file> | imagemin > <output>\n\nExample\n  imagemin images/* build\n  imagemin foo.png > foo-optimized.png\n  cat foo.png | imagemin > foo-optimized.png\n\nOptions\n  -i, --interlaced                    Interlace gif for progressive rendering\n  -o, --optimizationLevel <number>    Optimization level between 0 and 7\n  -p, --progressive                   Lossless conversion to progressive\n```\n\n\n## Related\n\n- [imagemin-app](https://github.com/imagemin/imagemin-app)\n- [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin)\n- [grunt-contrib-imagemin](https://github.com/gruntjs/grunt-contrib-imagemin)\n\n\n## License\n\nMIT © [imagemin](https://github.com/imagemin)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/imagemin/imagemin.git"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "version": "3.1.0"
}
